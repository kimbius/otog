diff --git a/dist/zod-prisma.cjs.development.js b/dist/zod-prisma.cjs.development.js
index fb04fd45d6e6d9407ed9ab0b13533b05f3ae4d08..dbc81c1c209c0d9438179bc126f4c65f4dcaa92a 100644
--- a/dist/zod-prisma.cjs.development.js
+++ b/dist/zod-prisma.cjs.development.js
@@ -101,7 +101,7 @@ const getZodConstructor = (field, getRelatedModelName = name => name.toString())
         break;
 
       case 'DateTime':
-        zodType = 'z.date()';
+        zodType = 'z.coerce.date()';
         break;
 
       case 'Float':
@@ -140,11 +140,25 @@ const getZodConstructor = (field, getRelatedModelName = name => name.toString())
     extraModifiers.push(...computeModifiers(field.documentation));
   }
 
-  if (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()'); // if (field.hasDefaultValue) extraModifiers.push('optional()')
+  if (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullable()'); // if (field.hasDefaultValue) extraModifiers.push('optional()')
 
   return `${zodType}${extraModifiers.join('.')}`;
 };
 
+const deDuplicateFields = fields => {
+  const fieldNames = new Set();
+  const uniqueFields = [];
+
+  for (const field of fields) {
+    const name = typeof field === 'string' ? field : field.name;
+    if (fieldNames.has(name)) continue;
+    fieldNames.add(name);
+    uniqueFields.push(field);
+  }
+
+  return uniqueFields;
+};
+
 const writeImportsForModel = (model, sourceFile, config, {
   schemaPath,
   outputPath,
@@ -184,7 +198,7 @@ const writeImportsForModel = (model, sourceFile, config, {
       kind: tsMorph.StructureKind.ImportDeclaration,
       isTypeOnly: enumFields.length === 0,
       moduleSpecifier: dotSlash(relativePath),
-      namedImports: enumFields.map(f => f.type)
+      namedImports: deDuplicateFields(enumFields.map(f => f.type))
     });
   }
 
diff --git a/dist/zod-prisma.cjs.development.js.map b/dist/zod-prisma.cjs.development.js.map
index c2ac3f57954c438381edb0eaaa01b3e171fcedea..3b72af00c5f6fae0dba6ffff0737e86a5d31f8a0 100644
--- a/dist/zod-prisma.cjs.development.js.map
+++ b/dist/zod-prisma.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: enumFields.map((f) => f.type),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","Set","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.coerce.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullable()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nconst deDuplicateFields = <T extends string | { name: string }>(fields: T[]) => {\n\tconst fieldNames = new Set<string>()\n\tconst uniqueFields: T[] = []\n\tfor (const field of fields) {\n\t\tconst name = typeof field === 'string' ? field : field.name\n\t\tif (fieldNames.has(name)) continue\n\t\tfieldNames.add(name)\n\t\tuniqueFields.push(field)\n\t}\n\treturn uniqueFields\n}\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: deDuplicateFields(enumFields.map((f) => f.type)),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","deDuplicateFields","fieldNames","Set","uniqueFields","has","add","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namespaceImport","moduleSpecifier","path","relative","resolve","dirname","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","Error","data","createSourceFile","overwrite","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","save"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/zod-prisma.cjs.production.min.js b/dist/zod-prisma.cjs.production.min.js
index 9720e85802156e5765b0cc277a5c3dbed9b5a2e8..daf5e18d80c48ece9690cb9a18ee2ca3c222d8fd 100644
--- a/dist/zod-prisma.cjs.production.min.js
+++ b/dist/zod-prisma.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";var e=require("@prisma/generator-helper"),t=require("typescript"),a=require("zod"),r=require("path"),i=require("ts-morph"),n=require("parenthesis");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=o(r);const s=a.z.enum(["true","false"]).transform((e=>JSON.parse(e))),c=a.z.object({relationModel:s.default("true").or(a.z.literal("default")),modelSuffix:a.z.string().default("Model"),modelCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:s.default("false"),imports:a.z.string().optional(),prismaJsonNullability:s.default("true")}),d=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),m=({modelCase:e,modelSuffix:t,relationModel:a})=>{const r=(a,r="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${r}${a}${t}`);return{modelName:e=>r(e,"default"===a?"_":""),relatedModelName:e=>r("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},f=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=n.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${n.stringify(t)})`));var t})),h=(e,t=(e=>e.toString()))=>{let a="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":a="z.string()";break;case"Int":a="z.number()",r.push("int()");break;case"BigInt":a="z.bigint()";break;case"DateTime":a="z.date()";break;case"Float":case"Decimal":a="z.number()";break;case"Json":a="jsonSchema";break;case"Boolean":a="z.boolean()";break;case"Bytes":a="z.unknown()"}else"enum"===e.kind?a=`z.nativeEnum(${e.type})`:"object"===e.kind&&(a=t(e.type));var i,n,o;return e.isList&&r.push("array()"),e.documentation&&(a=null!=(i=null==(n=f(e.documentation).find((e=>e.startsWith("custom("))))?void 0:n.slice(7).slice(0,-1))?i:a,r.push(...(o=e.documentation,f(o).filter((e=>!e.startsWith("custom(")))))),e.isRequired||"Json"===e.type||r.push("nullish()"),`${a}${r.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.5.4",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=new i.Project,r=e.dmmf.datamodel.models,{schemaPath:n}=e,o=e.generator.output.value,s=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,f=c.safeParse(e.generator.config);if(!f.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const z=f.data,S={clientPath:s,outputPath:o,schemaPath:n},y=a.createSourceFile(`${o}/index.ts`,{},{overwrite:!0});return((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(r,y),y.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove}),r.forEach((e=>{const r=a.createSourceFile(`${o}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,t,a,r)=>{((e,t,a,{schemaPath:r,outputPath:n,clientPath:o})=>{const{relatedModelName:s}=m(a),c=[{kind:i.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];a.imports&&c.push({kind:i.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(l.default.relative(n,l.default.resolve(l.default.dirname(r),a.imports)))}),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&c.push({kind:i.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const d=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=l.default.relative(n,o);if(d.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,isTypeOnly:0===d.length,moduleSpecifier:u(f),namedImports:d.map((e=>e.type))}),!1!==a.relationModel&&p.length>0){const t=p.filter((t=>t.type!==e.name));t.length>0&&c.push({kind:i.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(t.flatMap((e=>[`Complete${e.type}`,s(e.type)]))))})}t.addImportDeclarations(c)})(e,t,a,r),((e,t,a,r)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,t,a),((e,t,a,r)=>{const{modelName:n}=m(a);t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:n(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e)}`).write(",").newLine()}))})).write(")")}}]})})(e,t,a),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,a)&&((e,t,a,r)=>{const{modelName:n,relatedModelName:o}=m(a),l=e.fields.filter((e=>"object"===e.kind));t.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${n(e.name)}>`],properties:l.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),t.addStatements((t=>d(t,["","/**",` * ${o(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),t.addVariableStatement({declarationKind:i.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:o(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${n(e.name)}.extend(`).inlineBlock((()=>{l.forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e,o)}`).write(",").newLine()}))})).write("))")}}]})})(e,t,a)})(e,r,z,S),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove})})),a.save()}});
+"use strict";var e=require("@prisma/generator-helper"),t=require("typescript"),a=require("zod"),r=require("path"),n=require("ts-morph"),i=require("parenthesis");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(r);const l=a.z.enum(["true","false"]).transform((e=>JSON.parse(e))),c=a.z.object({relationModel:l.default("true").or(a.z.literal("default")),modelSuffix:a.z.string().default("Model"),modelCase:a.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:l.default("false"),imports:a.z.string().optional(),prismaJsonNullability:l.default("true")}),d=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),m=({modelCase:e,modelSuffix:t,relationModel:a})=>{const r=(a,r="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${r}${a}${t}`);return{modelName:e=>r(e,"default"===a?"_":""),relatedModelName:e=>r("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},f=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=i.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${i.stringify(t)})`));var t})),h=(e,t=(e=>e.toString()))=>{let a="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":a="z.string()";break;case"Int":a="z.number()",r.push("int()");break;case"BigInt":a="z.bigint()";break;case"DateTime":a="z.coerce.date()";break;case"Float":case"Decimal":a="z.number()";break;case"Json":a="jsonSchema";break;case"Boolean":a="z.boolean()";break;case"Bytes":a="z.unknown()"}else"enum"===e.kind?a=`z.nativeEnum(${e.type})`:"object"===e.kind&&(a=t(e.type));var n,i,o;return e.isList&&r.push("array()"),e.documentation&&(a=null!=(n=null==(i=f(e.documentation).find((e=>e.startsWith("custom("))))?void 0:i.slice(7).slice(0,-1))?n:a,r.push(...(o=e.documentation,f(o).filter((e=>!e.startsWith("custom(")))))),e.isRequired||"Json"===e.type||r.push("nullable()"),`${a}${r.join(".")}`},S=e=>{const t=new Set,a=[];for(const r of e){const e="string"==typeof r?r:r.name;t.has(e)||(t.add(e),a.push(r))}return a};e.generatorHandler({onManifest:()=>({version:"0.5.4",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=new n.Project,r=e.dmmf.datamodel.models,{schemaPath:i}=e,o=e.generator.output.value,l=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,f=c.safeParse(e.generator.config);if(!f.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const z=f.data,y={clientPath:l,outputPath:o,schemaPath:i},b=a.createSourceFile(`${o}/index.ts`,{},{overwrite:!0});return((e,t)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name.toLowerCase()}`})))})(r,b),b.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove}),r.forEach((e=>{const r=a.createSourceFile(`${o}/${e.name.toLowerCase()}.ts`,{},{overwrite:!0});((e,t,a,r)=>{((e,t,a,{schemaPath:r,outputPath:i,clientPath:o})=>{const{relatedModelName:l}=m(a),c=[{kind:n.StructureKind.ImportDeclaration,namespaceImport:"z",moduleSpecifier:"zod"}];a.imports&&c.push({kind:n.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(s.default.relative(i,s.default.resolve(s.default.dirname(r),a.imports)))}),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&c.push({kind:n.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const d=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=s.default.relative(i,o);if(d.length>0&&c.push({kind:n.StructureKind.ImportDeclaration,isTypeOnly:0===d.length,moduleSpecifier:u(f),namedImports:S(d.map((e=>e.type)))}),!1!==a.relationModel&&p.length>0){const t=p.filter((t=>t.type!==e.name));t.length>0&&c.push({kind:n.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(t.flatMap((e=>[`Complete${e.type}`,l(e.type)]))))})}t.addImportDeclarations(c)})(e,t,a,r),((e,t,a,r)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),d(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,t,a),((e,t,a,r)=>{const{modelName:i}=m(a);t.addVariableStatement({declarationKind:n.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:i(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e)}`).write(",").newLine()}))})).write(")")}}]})})(e,t,a),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,a)&&((e,t,a,r)=>{const{modelName:i,relatedModelName:o}=m(a),s=e.fields.filter((e=>"object"===e.kind));t.addInterface({name:`Complete${e.name}`,isExported:!0,extends:[`z.infer<typeof ${i(e.name)}>`],properties:s.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),t.addStatements((t=>d(t,["","/**",` * ${o(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"]))),t.addVariableStatement({declarationKind:n.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:o(e.name),type:`z.ZodSchema<Complete${e.name}>`,initializer(t){t.write(`z.lazy(() => ${i(e.name)}.extend(`).inlineBlock((()=>{s.forEach((e=>{d(t,p(e.documentation)),t.write(`${e.name}: ${h(e,o)}`).write(",").newLine()}))})).write("))")}}]})})(e,t,a)})(e,r,z,y),r.formatText({indentSize:2,convertTabsToSpaces:!0,semicolons:t.SemicolonPreference.Remove})})),a.save()}});
 //# sourceMappingURL=zod-prisma.cjs.production.min.js.map
diff --git a/dist/zod-prisma.cjs.production.min.js.map b/dist/zod-prisma.cjs.production.min.js.map
index 10501876bc9965c211638dcf21e3fdecad472a49..1d904818543c26f1b98d93d04031224e36fd8663 100644
--- a/dist/zod-prisma.cjs.production.min.js.map
+++ b/dist/zod-prisma.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullish()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: enumFields.map((f) => f.type),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","getRelatedModelName","zodType","extraModifiers","kind","type","isList","documentation","find","modifier","_getZodDocElements$fi","isRequired","join","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","Error","data","prismaOptions","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","sourceFile","importList","StructureKind","ImportDeclaration","namespaceImport","path","relative","resolve","dirname","fields","some","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","Set","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","generateRelatedSchemaForModel","populateModelFile","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { z } from 'zod'\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg))\n\nexport const configSchema = z.object({\n\trelationModel: configBoolean.default('true').or(z.literal('default')),\n\tmodelSuffix: z.string().default('Model'),\n\tmodelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n\tuseDecimalJs: configBoolean.default('false'),\n\timports: z.string().optional(),\n\tprismaJsonNullability: configBoolean.default('true'),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\nexport type PrismaOptions = {\n\tschemaPath: string\n\toutputPath: string\n\tclientPath: string\n}\n\nexport type Names = {\n\tmodel: string\n\trelated: string\n}\n","import { DMMF } from '@prisma/generator-helper'\nimport type { CodeBlockWriter } from 'ts-morph'\nimport { Config } from './config'\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n\tarray.forEach((line) => writer.write(line).conditionalNewLine(newLine))\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n\tconst formatModelName = (name: string, prefix = '') => {\n\t\tif (modelCase === 'camelCase') {\n\t\t\tname = name.slice(0, 1).toLowerCase() + name.slice(1)\n\t\t}\n\t\treturn `${prefix}${name}${modelSuffix}`\n\t}\n\n\treturn {\n\t\tmodelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n\t\trelatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\t\tformatModelName(\n\t\t\t\trelationModel === 'default' ? name.toString() : `Related${name.toString()}`\n\t\t\t),\n\t}\n}\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n\tmodel.fields.some((field) => field.kind === 'object') && config.relationModel !== false\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n\treturn input.reduce((arr, item, idx) => {\n\t\treturn idx % size === 0\n\t\t\t? [...arr, [item]]\n\t\t\t: [...arr.slice(0, -1), [...arr.slice(-1)[0], item]]\n\t}, [])\n}\n\nexport const dotSlash = (input: string) => {\n\tconst converted = input\n\t\t.replace(/^\\\\\\\\\\?\\\\/, '')\n\t\t.replace(/\\\\/g, '/')\n\t\t.replace(/\\/\\/+/g, '/')\n\n\tif (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0]\n\n\tif (converted.startsWith(`../`)) return converted\n\n\treturn './' + converted\n}\n","import { ArrayTree, parse, stringify } from 'parenthesis'\nimport { chunk } from './util'\n\nexport const getJSDocs = (docString?: string) => {\n\tconst lines: string[] = []\n\n\tif (docString) {\n\t\tconst docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'))\n\n\t\tif (docLines.length) {\n\t\t\tlines.push('/**')\n\t\t\tdocLines.forEach((dL) => lines.push(` * ${dL}`))\n\t\t\tlines.push(' */')\n\t\t}\n\t}\n\n\treturn lines\n}\n\nexport const getZodDocElements = (docString: string) =>\n\tdocString\n\t\t.split('\\n')\n\t\t.filter((line) => line.trimStart().startsWith('@zod'))\n\t\t.map((line) => line.trimStart().slice(4))\n\t\t.flatMap((line) =>\n\t\t\t// Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n\t\t\tchunk(parse(line), 2)\n\t\t\t\t.slice(0, -1)\n\t\t\t\t.map(\n\t\t\t\t\t([each, contents]) =>\n\t\t\t\t\t\t(each as string).replace(/\\)?\\./, '') +\n\t\t\t\t\t\t`${stringify(contents as ArrayTree)})`\n\t\t\t\t)\n\t\t)\n\nexport const computeCustomSchema = (docString: string) => {\n\treturn getZodDocElements(docString)\n\t\t.find((modifier) => modifier.startsWith('custom('))\n\t\t?.slice(7)\n\t\t.slice(0, -1)\n}\n\nexport const computeModifiers = (docString: string) => {\n\treturn getZodDocElements(docString).filter((each) => !each.startsWith('custom('))\n}\n","import type { DMMF } from '@prisma/generator-helper'\nimport { computeCustomSchema, computeModifiers } from './docs'\n\nexport const getZodConstructor = (\n\tfield: DMMF.Field,\n\tgetRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n\t\tname.toString()\n) => {\n\tlet zodType = 'z.unknown()'\n\tlet extraModifiers: string[] = ['']\n\tif (field.kind === 'scalar') {\n\t\tswitch (field.type) {\n\t\t\tcase 'String':\n\t\t\t\tzodType = 'z.string()'\n\t\t\t\tbreak\n\t\t\tcase 'Int':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\textraModifiers.push('int()')\n\t\t\t\tbreak\n\t\t\tcase 'BigInt':\n\t\t\t\tzodType = 'z.bigint()'\n\t\t\t\tbreak\n\t\t\tcase 'DateTime':\n\t\t\t\tzodType = 'z.coerce.date()'\n\t\t\t\tbreak\n\t\t\tcase 'Float':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Decimal':\n\t\t\t\tzodType = 'z.number()'\n\t\t\t\tbreak\n\t\t\tcase 'Json':\n\t\t\t\tzodType = 'jsonSchema'\n\t\t\t\tbreak\n\t\t\tcase 'Boolean':\n\t\t\t\tzodType = 'z.boolean()'\n\t\t\t\tbreak\n\t\t\t// TODO: Proper type for bytes fields\n\t\t\tcase 'Bytes':\n\t\t\t\tzodType = 'z.unknown()'\n\t\t\t\tbreak\n\t\t}\n\t} else if (field.kind === 'enum') {\n\t\tzodType = `z.nativeEnum(${field.type})`\n\t} else if (field.kind === 'object') {\n\t\tzodType = getRelatedModelName(field.type)\n\t}\n\n\tif (field.isList) extraModifiers.push('array()')\n\tif (field.documentation) {\n\t\tzodType = computeCustomSchema(field.documentation) ?? zodType\n\t\textraModifiers.push(...computeModifiers(field.documentation))\n\t}\n\tif (!field.isRequired && field.type !== 'Json') extraModifiers.push('nullable()')\n\t// if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n\treturn `${zodType}${extraModifiers.join('.')}`\n}\n","import path from 'path'\nimport { DMMF } from '@prisma/generator-helper'\nimport {\n\tImportDeclarationStructure,\n\tSourceFile,\n\tStructureKind,\n\tVariableDeclarationKind,\n} from 'ts-morph'\nimport { Config, PrismaOptions } from './config'\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util'\nimport { getJSDocs } from './docs'\nimport { getZodConstructor } from './types'\n\nconst deDuplicateFields = <T extends string | { name: string }>(fields: T[]) => {\n\tconst fieldNames = new Set<string>()\n\tconst uniqueFields: T[] = []\n\tfor (const field of fields) {\n\t\tconst name = typeof field === 'string' ? field : field.name\n\t\tif (fieldNames.has(name)) continue\n\t\tfieldNames.add(name)\n\t\tuniqueFields.push(field)\n\t}\n\treturn uniqueFields\n}\n\nexport const writeImportsForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t{ schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n\tconst { relatedModelName } = useModelNames(config)\n\tconst importList: ImportDeclarationStructure[] = [\n\t\t{\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'z',\n\t\t\tmoduleSpecifier: 'zod',\n\t\t},\n\t]\n\n\tif (config.imports) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamespaceImport: 'imports',\n\t\t\tmoduleSpecifier: dotSlash(\n\t\t\t\tpath.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n\t\t\t),\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tnamedImports: ['Decimal'],\n\t\t\tmoduleSpecifier: 'decimal.js',\n\t\t})\n\t}\n\n\tconst enumFields = model.fields.filter((f) => f.kind === 'enum')\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\tconst relativePath = path.relative(outputPath, clientPath)\n\n\tif (enumFields.length > 0) {\n\t\timportList.push({\n\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\tisTypeOnly: enumFields.length === 0,\n\t\t\tmoduleSpecifier: dotSlash(relativePath),\n\t\t\tnamedImports: deDuplicateFields(enumFields.map((f) => f.type)),\n\t\t})\n\t}\n\n\tif (config.relationModel !== false && relationFields.length > 0) {\n\t\tconst filteredFields = relationFields.filter((f) => f.type !== model.name)\n\n\t\tif (filteredFields.length > 0) {\n\t\t\timportList.push({\n\t\t\t\tkind: StructureKind.ImportDeclaration,\n\t\t\t\tmoduleSpecifier: './index',\n\t\t\t\tnamedImports: Array.from(\n\t\t\t\t\tnew Set(\n\t\t\t\t\t\tfilteredFields.flatMap((f) => [\n\t\t\t\t\t\t\t`Complete${f.type}`,\n\t\t\t\t\t\t\trelatedModelName(f.type),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t})\n\t\t}\n\t}\n\n\tsourceFile.addImportDeclarations(importList)\n}\n\nexport const writeTypeSpecificSchemas = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tif (model.fields.some((f) => f.type === 'Json')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for JSON fields',\n\t\t\t\t`type Literal = boolean | number | string${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : '| null'\n\t\t\t\t}`,\n\t\t\t\t'type Json = Literal | { [key: string]: Json } | Json[]',\n\t\t\t\t`const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n\t\t\t\t\tconfig.prismaJsonNullability ? '' : ', z.null()'\n\t\t\t\t}])`,\n\t\t\t\t'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n\t\t\t])\n\t\t})\n\t}\n\n\tif (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n\t\tsourceFile.addStatements((writer) => {\n\t\t\twriter.newLine()\n\t\t\twriteArray(writer, [\n\t\t\t\t'// Helper schema for Decimal fields',\n\t\t\t\t'z',\n\t\t\t\t'.instanceof(Decimal)',\n\t\t\t\t'.or(z.string())',\n\t\t\t\t'.or(z.number())',\n\t\t\t\t'.refine((value) => {',\n\t\t\t\t'  try {',\n\t\t\t\t'    return new Decimal(value);',\n\t\t\t\t'  } catch (error) {',\n\t\t\t\t'    return false;',\n\t\t\t\t'  }',\n\t\t\t\t'})',\n\t\t\t\t'.transform((value) => new Decimal(value));',\n\t\t\t])\n\t\t})\n\t}\n}\n\nexport const generateSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName } = useModelNames(config)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tleadingTrivia: (writer) => writer.blankLineIfLastNot(),\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: modelName(model.name),\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write('z.object(')\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\tmodel.fields\n\t\t\t\t\t\t\t\t.filter((f) => f.kind !== 'object')\n\t\t\t\t\t\t\t\t.forEach((field) => {\n\t\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\t\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t\t.write(`${field.name}: ${getZodConstructor(field)}`)\n\t\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write(')')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const generateRelatedSchemaForModel = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\t_prismaOptions: PrismaOptions\n) => {\n\tconst { modelName, relatedModelName } = useModelNames(config)\n\n\tconst relationFields = model.fields.filter((f) => f.kind === 'object')\n\n\tsourceFile.addInterface({\n\t\tname: `Complete${model.name}`,\n\t\tisExported: true,\n\t\textends: [`z.infer<typeof ${modelName(model.name)}>`],\n\t\tproperties: relationFields.map((f) => ({\n\t\t\thasQuestionToken: !f.isRequired,\n\t\t\tname: f.name,\n\t\t\ttype: `Complete${f.type}${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n\t\t})),\n\t})\n\n\tsourceFile.addStatements((writer) =>\n\t\twriteArray(writer, [\n\t\t\t'',\n\t\t\t'/**',\n\t\t\t` * ${relatedModelName(\n\t\t\t\tmodel.name\n\t\t\t)} contains all relations on your model in addition to the scalars`,\n\t\t\t' *',\n\t\t\t' * NOTE: Lazy required in case of potential circular dependencies within schema',\n\t\t\t' */',\n\t\t])\n\t)\n\n\tsourceFile.addVariableStatement({\n\t\tdeclarationKind: VariableDeclarationKind.Const,\n\t\tisExported: true,\n\t\tdeclarations: [\n\t\t\t{\n\t\t\t\tname: relatedModelName(model.name),\n\t\t\t\ttype: `z.ZodSchema<Complete${model.name}>`,\n\t\t\t\tinitializer(writer) {\n\t\t\t\t\twriter\n\t\t\t\t\t\t.write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n\t\t\t\t\t\t.inlineBlock(() => {\n\t\t\t\t\t\t\trelationFields.forEach((field) => {\n\t\t\t\t\t\t\t\twriteArray(writer, getJSDocs(field.documentation))\n\n\t\t\t\t\t\t\t\twriter\n\t\t\t\t\t\t\t\t\t.write(\n\t\t\t\t\t\t\t\t\t\t`${field.name}: ${getZodConstructor(\n\t\t\t\t\t\t\t\t\t\t\tfield,\n\t\t\t\t\t\t\t\t\t\t\trelatedModelName\n\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t.write(',')\n\t\t\t\t\t\t\t\t\t.newLine()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.write('))')\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t})\n}\n\nexport const populateModelFile = (\n\tmodel: DMMF.Model,\n\tsourceFile: SourceFile,\n\tconfig: Config,\n\tprismaOptions: PrismaOptions\n) => {\n\twriteImportsForModel(model, sourceFile, config, prismaOptions)\n\twriteTypeSpecificSchemas(model, sourceFile, config, prismaOptions)\n\tgenerateSchemaForModel(model, sourceFile, config, prismaOptions)\n\tif (needsRelatedModel(model, config))\n\t\tgenerateRelatedSchemaForModel(model, sourceFile, config, prismaOptions)\n}\n\nexport const generateBarrelFile = (models: DMMF.Model[], indexFile: SourceFile) => {\n\tmodels.forEach((model) =>\n\t\tindexFile.addExportDeclaration({\n\t\t\tmoduleSpecifier: `./${model.name.toLowerCase()}`,\n\t\t})\n\t)\n}\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json'\n\nimport { generatorHandler } from '@prisma/generator-helper'\nimport { SemicolonPreference } from 'typescript'\nimport { configSchema, PrismaOptions } from './config'\nimport { populateModelFile, generateBarrelFile } from './generator'\nimport { Project } from 'ts-morph'\n\ngeneratorHandler({\n\tonManifest() {\n\t\treturn {\n\t\t\tversion,\n\t\t\tprettyName: 'Zod Schemas',\n\t\t\tdefaultOutput: 'zod',\n\t\t}\n\t},\n\tonGenerate(options) {\n\t\tconst project = new Project()\n\n\t\tconst models = options.dmmf.datamodel.models\n\n\t\tconst { schemaPath } = options\n\t\tconst outputPath = options.generator.output!.value\n\t\tconst clientPath = options.otherGenerators.find(\n\t\t\t(each) => each.provider.value === 'prisma-client-js'\n\t\t)!.output!.value!\n\n\t\tconst results = configSchema.safeParse(options.generator.config)\n\t\tif (!results.success)\n\t\t\tthrow new Error(\n\t\t\t\t'Incorrect config provided. Please check the values you provided and try again.'\n\t\t\t)\n\n\t\tconst config = results.data\n\t\tconst prismaOptions: PrismaOptions = {\n\t\t\tclientPath,\n\t\t\toutputPath,\n\t\t\tschemaPath,\n\t\t}\n\n\t\tconst indexFile = project.createSourceFile(\n\t\t\t`${outputPath}/index.ts`,\n\t\t\t{},\n\t\t\t{ overwrite: true }\n\t\t)\n\n\t\tgenerateBarrelFile(models, indexFile)\n\n\t\tindexFile.formatText({\n\t\t\tindentSize: 2,\n\t\t\tconvertTabsToSpaces: true,\n\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t})\n\n\t\tmodels.forEach((model) => {\n\t\t\tconst sourceFile = project.createSourceFile(\n\t\t\t\t`${outputPath}/${model.name.toLowerCase()}.ts`,\n\t\t\t\t{},\n\t\t\t\t{ overwrite: true }\n\t\t\t)\n\n\t\t\tpopulateModelFile(model, sourceFile, config, prismaOptions)\n\n\t\t\tsourceFile.formatText({\n\t\t\t\tindentSize: 2,\n\t\t\t\tconvertTabsToSpaces: true,\n\t\t\t\tsemicolons: SemicolonPreference.Remove,\n\t\t\t})\n\t\t})\n\n\t\treturn project.save()\n\t},\n})\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","getRelatedModelName","zodType","extraModifiers","kind","type","isList","documentation","find","modifier","_getZodDocElements$fi","isRequired","join","deDuplicateFields","fields","fieldNames","Set","uniqueFields","has","add","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","project","Project","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","Error","data","prismaOptions","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","indentSize","convertTabsToSpaces","semicolons","SemicolonPreference","Remove","sourceFile","importList","StructureKind","ImportDeclaration","namespaceImport","path","relative","resolve","dirname","some","f","namedImports","enumFields","relationFields","relativePath","isTypeOnly","filteredFields","Array","from","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","generateRelatedSchemaForModel","populateModelFile","save"],"mappings":"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"}